package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"image/color"
	"image/png"
	"log"
	"machine"
	"os"
	"time"

	"tinygo.org/x/drivers/ili9341"
)

//go:embed gopher.png
var binaryData []byte

func main() {
	time.Sleep(2 * time.Second) // USB CDC接続待ち
	println(string(binaryData))

	// 画像を表示
	embedImage()
}

func embedImage() {
	// go:embedで埋め込まれた画像データを使用
	// binaryDataはグローバル変数として定義済み

	// デバッグ：埋め込みデータのサイズを確認

	// go:embed gopher.png
	fmt.Printf("Embedded data size: %d bytes\n", len(binaryData))

	if len(binaryData) == 0 {
		fmt.Println("Error: No embedded data found")
		return
	}

	// ディスプレイを初期化
	machine.SPI3.Configure(machine.SPIConfig{
		Frequency: 40000000,
		SCK:       machine.LCD_SCK_PIN,
		SDO:       machine.LCD_SDO_PIN,
		SDI:       machine.LCD_SDI_PIN,
	})

	display := ili9341.NewSPI(
		*machine.SPI3,
		machine.LCD_DC,
		machine.LCD_SS_PIN,
		machine.LCD_RESET,
	)
	display.Configure(ili9341.Config{})

	// バックライトをオンにする
	machine.LCD_BACKLIGHT.Configure(machine.PinConfig{Mode: machine.PinOutput})
	machine.LCD_BACKLIGHT.High()

	// 画面をクリア（白色で塗りつぶし）
	display.FillScreen(color.RGBA{255, 255, 255, 255})

	// 埋め込まれた画像をデコード
	img, err := png.Decode(bytes.NewReader(binaryData))
	if err != nil {
		fmt.Printf("PNG decode error: %v\n", err)
		// エラーの場合は赤い四角形を表示
		for y := int16(50); y < 100; y++ {
			for x := int16(50); x < 100; x++ {
				display.SetPixel(x, y, color.RGBA{255, 0, 0, 255})
			}
		}
		select {}
	}

	fmt.Printf("Image size: %dx%d\n", img.Bounds().Max.X, img.Bounds().Max.Y)

	// 画像を描画
	for y := 0; y < img.Bounds().Max.Y; y++ {
		for x := 0; x < img.Bounds().Max.X; x++ {
			r, g, b, _ := img.At(x, y).RGBA()
			display.SetPixel(int16(x), int16(y), color.RGBA{
				R: uint8(r >> 8), G: uint8(g >> 8),
				B: uint8(b >> 8), A: uint8(0xFF),
			})
		}
	}

	select {}
}

// ディスプレイテスト用の関数
func testDisplay() {
	// ディスプレイを初期化
	machine.SPI3.Configure(machine.SPIConfig{
		Frequency: 40000000,
		SCK:       machine.LCD_SCK_PIN,
		SDO:       machine.LCD_SDO_PIN,
		SDI:       machine.LCD_SDI_PIN,
	})

	display := ili9341.NewSPI(
		*machine.SPI3,
		machine.LCD_DC,
		machine.LCD_SS_PIN,
		machine.LCD_RESET,
	)
	display.Configure(ili9341.Config{})

	// バックライトをオンにする
	machine.LCD_BACKLIGHT.Configure(machine.PinConfig{Mode: machine.PinOutput})
	machine.LCD_BACKLIGHT.High()

	// 画面をクリア（青色で塗りつぶし）
	display.FillScreen(color.RGBA{0, 0, 255, 255})

	// 中央に赤い四角形を描画
	for y := int16(100); y < 140; y++ {
		for x := int16(140); x < 180; x++ {
			display.SetPixel(x, y, color.RGBA{255, 0, 0, 255})
		}
	}

	select {}
}

// 画像サイズが十分に小さい場合
func samll() {
	// img2byte()
	tiny_img := []byte{
		0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
		0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
		0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A, 0xF4, 0x00, 0x00, 0x00,
		0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
		0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52,
		0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x04, 0x67,
		0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00,
		0x00, 0x01, 0xE4, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0xED, 0x56, 0xBD,
		0x4E, 0xC2, 0x50, 0x14, 0x3E, 0x35, 0x94, 0xBF, 0x42, 0xA4, 0x21, 0x08,
		0x06, 0x07, 0x49, 0x91, 0xC5, 0x41, 0x26, 0x1D, 0x98, 0x9C, 0xD8, 0xE1,
		0x01, 0x7C, 0x0B, 0xDC, 0x7C, 0x00, 0x77, 0x1F, 0x00, 0x27, 0x17, 0x1F,
		0xC0, 0x1D, 0x16, 0x17, 0xC1, 0xC4, 0xC5, 0x98, 0xC8, 0x62, 0xC2, 0x4F,
		0x8C, 0x3F, 0x69, 0x11, 0x04, 0xC1, 0x73, 0x8E, 0x96, 0x90, 0x08, 0x6D,
		0x35, 0xAD, 0x84, 0xA4, 0x5F, 0xD2, 0xB4, 0xB9, 0x3D, 0xF7, 0xDE, 0xEF,
		0x9C, 0x73, 0xCF, 0x77, 0xAE, 0xB0, 0xDF, 0x38, 0x1B, 0xC3, 0x02, 0xB1,
		0x02, 0x0B, 0x86, 0x4B, 0xC0, 0x25, 0xB0, 0x9C, 0x04, 0xB2, 0xFE, 0x35,
		0x48, 0x7B, 0x65, 0xB0, 0x03, 0xA6, 0x04, 0x0E, 0xA3, 0xBB, 0x3F, 0xC6,
		0xD4, 0xD1, 0x00, 0xEC, 0x82, 0x21, 0x81, 0x83, 0xD5, 0x6D, 0x50, 0xBC,
		0x11, 0x28, 0x21, 0x89, 0x5C, 0x20, 0xC9, 0x63, 0xF4, 0x2E, 0x84, 0xB7,
		0x40, 0x12, 0xC4, 0x89, 0x5D, 0x31, 0x9C, 0x81, 0xBC, 0x94, 0x62, 0x3B,
		0x3D, 0x32, 0x05, 0x1C, 0x9B, 0xFE, 0xFF, 0x27, 0x02, 0xE5, 0x97, 0x1B,
		0xF6, 0xF6, 0xF8, 0xF1, 0x12, 0xAA, 0x6F, 0x0F, 0x3C, 0x46, 0xEF, 0x7A,
		0xAF, 0x03, 0x09, 0x4F, 0x70, 0x62, 0xB7, 0x83, 0x29, 0x69, 0x7D, 0x68,
		0x70, 0x8A, 0xF6, 0x45, 0x24, 0x47, 0x58, 0xF7, 0x48, 0x10, 0x5A, 0x11,
		0xF9, 0x49, 0xA3, 0x13, 0xF3, 0xE0, 0x01, 0x1B, 0xA0, 0x8E, 0xDE, 0xA1,
		0xD6, 0x6B, 0xF3, 0xB7, 0xAE, 0xEB, 0x44, 0x94, 0x3C, 0x6F, 0x0E, 0xBB,
		0x50, 0xF9, 0x26, 0x3F, 0x0B, 0x8E, 0x55, 0x01, 0x11, 0x52, 0x30, 0x1D,
		0xE4, 0x7D, 0xB5, 0x3B, 0x9F, 0x80, 0x69, 0x04, 0xEA, 0xFD, 0x36, 0xE7,
		0x56, 0xC3, 0x54, 0x9C, 0x3C, 0x5D, 0xF1, 0x19, 0xC8, 0x87, 0x36, 0xF9,
		0x1F, 0xA5, 0xA7, 0x6A, 0xE0, 0x1D, 0xCD, 0x4D, 0x8B, 0x11, 0xC3, 0xF5,
		0x05, 0xA7, 0xBA, 0x21, 0xE5, 0x3E, 0x17, 0xD8, 0x80, 0xD6, 0x50, 0x83,
		0x5A, 0xBF, 0x3D, 0xD7, 0xCE, 0x91, 0x14, 0xD0, 0xE6, 0x5C, 0xBE, 0xC2,
		0xD8, 0x70, 0x73, 0x82, 0xB0, 0x54, 0xF7, 0x01, 0xA3, 0x7A, 0xFE, 0x17,
		0x02, 0xEA, 0xD8, 0x3E, 0x05, 0xD4, 0x61, 0x59, 0x07, 0xA8, 0x12, 0xA6,
		0x25, 0x98, 0x94, 0x8F, 0x40, 0xF9, 0x8E, 0xA3, 0x28, 0x5D, 0xA3, 0x38,
		0x51, 0xBD, 0x7F, 0xA9, 0xA7, 0x8C, 0x62, 0x85, 0xB9, 0x17, 0x00, 0xCE,
		0x5F, 0x6F, 0x0D, 0xD7, 0xB5, 0x1C, 0x01, 0x52, 0xC3, 0x69, 0x45, 0xCB,
		0xFA, 0x63, 0x5C, 0x66, 0xB9, 0x60, 0x92, 0x15, 0x30, 0x1F, 0x4A, 0x71,
		0x89, 0x36, 0x51, 0x11, 0x8F, 0x3A, 0x15, 0x96, 0x70, 0xB3, 0xCD, 0x7F,
		0x45, 0x60, 0x16, 0x9A, 0x58, 0x62, 0xF4, 0x50, 0x64, 0x24, 0x8C, 0x84,
		0x86, 0x29, 0x52, 0x44, 0x19, 0xB2, 0xBE, 0x18, 0x39, 0x6F, 0x09, 0xB6,
		0x96, 0x21, 0x91, 0x09, 0x23, 0x11, 0xC5, 0x27, 0xB3, 0x68, 0xD9, 0x4A,
		0x80, 0xCE, 0x40, 0x02, 0x1B, 0x4C, 0x69, 0x46, 0x7B, 0xD6, 0x41, 0xE7,
		0x81, 0x6C, 0x48, 0xFD, 0x4A, 0xD1, 0x3D, 0x4B, 0x77, 0x06, 0x5B, 0x75,
		0x80, 0xC4, 0x87, 0x3A, 0x28, 0x45, 0x82, 0xCE, 0x48, 0x1C, 0xC9, 0x5C,
		0xA8, 0x0D, 0xC3, 0x39, 0xB6, 0x74, 0x43, 0x1D, 0x65, 0x6E, 0xC7, 0x19,
		0x8E, 0xC4, 0xDD, 0xE0, 0x19, 0x37, 0xBF, 0x37, 0x9D, 0xB3, 0x5C, 0x4A,
		0xE8, 0x12, 0x70, 0x09, 0x38, 0x81, 0x4F, 0xBD, 0xC1, 0xAA, 0x14, 0xAB,
		0x73, 0xA0, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
		0x42, 0x60, 0x82,
	}

	// ディスプレイを初期化
	machine.SPI3.Configure(machine.SPIConfig{
		Frequency: 40000000,
		SCK:       machine.LCD_SCK_PIN,
		SDO:       machine.LCD_SDO_PIN,
		SDI:       machine.LCD_SDI_PIN,
	})

	display := ili9341.NewSPI(
		*machine.SPI3,
		machine.LCD_DC,
		machine.LCD_SS_PIN,
		machine.LCD_RESET,
	)

	display.Configure(ili9341.Config{})

	// バックライトをオンにする
	machine.LCD_BACKLIGHT.Configure(machine.PinConfig{Mode: machine.PinOutput})
	machine.LCD_BACKLIGHT.High()

	// 画面をクリア（白色で塗りつぶし）
	display.FillScreen(color.RGBA{255, 255, 255, 255})

	img, err := png.Decode(bytes.NewReader(tiny_img))
	if err != nil {
		log.Fatal(err)
	}

	for y := 0; y < img.Bounds().Max.Y; y++ {
		for x := 0; x < img.Bounds().Max.X; x++ {
			r, g, b, _ := img.At(x, y).RGBA()
			display.SetPixel(int16(x), int16(y), color.RGBA{
				R: uint8(r >> 8), G: uint8(g >> 8),
				B: uint8(b >> 8), A: uint8(0xFF),
			})
		}
	}
	select {}
}

// 320x240の画像を画面いっぱいに表示する関数
func displayFullScreen() {
	// ここに320x240のバイト配列を配置
	// fullscreen_img := []byte{ ... }

	// ディスプレイを初期化
	machine.SPI3.Configure(machine.SPIConfig{
		Frequency: 40000000,
		SCK:       machine.LCD_SCK_PIN,
		SDO:       machine.LCD_SDO_PIN,
		SDI:       machine.LCD_SDI_PIN,
	})

	display := ili9341.NewSPI(
		*machine.SPI3,
		machine.LCD_DC,
		machine.LCD_SS_PIN,
		machine.LCD_RESET,
	)
	display.Configure(ili9341.Config{})

	// バックライトをオンにする
	machine.LCD_BACKLIGHT.Configure(machine.PinConfig{Mode: machine.PinOutput})
	machine.LCD_BACKLIGHT.High()

	// 画面をクリア
	display.FillScreen(color.RGBA{0, 0, 0, 255})

	fmt.Println("320x240の画像を準備してください")
	select {}
}

func img2byte() {
	filepath := "./tiny_img.png"
	data, err := os.ReadFile(filepath)
	if err != nil {
		fmt.Println("read img err.")
		os.Exit(1)
	}
	fmt.Printf("var tinygo_jpg = []byte{")
	for i, b := range data {
		if i%12 == 0 {
			fmt.Printf("\n\t")
		}
		fmt.Printf("0x%02X, ", b) // ← %02X に修正（&ではなく%）
	}
	fmt.Println("\n}")

	// 出力結果
	// var tinygo_jpg = []byte{
	//     0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	//     0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20,
	//     0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7A, 0x7A, 0xF4, 0x00, 0x00, 0x00,
	//     0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B,
	//     0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52,
	//     0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 0x00, 0x04, 0x67,
	//     0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 0x61, 0x05, 0x00,
	//     0x00, 0x01, 0xE4, 0x49, 0x44, 0x41, 0x54, 0x78, 0x01, 0xED, 0x56, 0xBD,
	//     0x4E, 0xC2, 0x50, 0x14, 0x3E, 0x35, 0x94, 0xBF, 0x42, 0xA4, 0x21, 0x08,
	//     0x06, 0x07, 0x49, 0x91, 0xC5, 0x41, 0x26, 0x1D, 0x98, 0x9C, 0xD8, 0xE1,
	//     0x01, 0x7C, 0x0B, 0xDC, 0x7C, 0x00, 0x77, 0x1F, 0x00, 0x27, 0x17, 0x1F,
	//     0xC0, 0x1D, 0x16, 0x17, 0xC1, 0xC4, 0xC5, 0x98, 0xC8, 0x62, 0xC2, 0x4F,
	//     0x8C, 0x3F, 0x69, 0x11, 0x04, 0xC1, 0x73, 0x8E, 0x96, 0x90, 0x08, 0x6D,
	//     0x35, 0xAD, 0x84, 0xA4, 0x5F, 0xD2, 0xB4, 0xB9, 0x3D, 0xF7, 0xDE, 0xEF,
	//     0x9C, 0x73, 0xCF, 0x77, 0xAE, 0xB0, 0xDF, 0x38, 0x1B, 0xC3, 0x02, 0xB1,
	//     0x02, 0x0B, 0x86, 0x4B, 0xC0, 0x25, 0xB0, 0x9C, 0x04, 0xB2, 0xFE, 0x35,
	//     0x48, 0x7B, 0x65, 0xB0, 0x03, 0xA6, 0x04, 0x0E, 0xA3, 0xBB, 0x3F, 0xC6,
	//     0xD4, 0xD1, 0x00, 0xEC, 0x82, 0x21, 0x81, 0x83, 0xD5, 0x6D, 0x50, 0xBC,
	//     0x11, 0x28, 0x21, 0x89, 0x5C, 0x20, 0xC9, 0x63, 0xF4, 0x2E, 0x84, 0xB7,
	//     0x40, 0x12, 0xC4, 0x89, 0x5D, 0x31, 0x9C, 0x81, 0xBC, 0x94, 0x62, 0x3B,
	//     0x3D, 0x32, 0x05, 0x1C, 0x9B, 0xFE, 0xFF, 0x27, 0x02, 0xE5, 0x97, 0x1B,
	//     0xF6, 0xF6, 0xF8, 0xF1, 0x12, 0xAA, 0x6F, 0x0F, 0x3C, 0x46, 0xEF, 0x7A,
	//     0xAF, 0x03, 0x09, 0x4F, 0x70, 0x62, 0xB7, 0x83, 0x29, 0x69, 0x7D, 0x68,
	//     0x70, 0x8A, 0xF6, 0x45, 0x24, 0x47, 0x58, 0xF7, 0x48, 0x10, 0x5A, 0x11,
	//     0xF9, 0x49, 0xA3, 0x13, 0xF3, 0xE0, 0x01, 0x1B, 0xA0, 0x8E, 0xDE, 0xA1,
	//     0xD6, 0x6B, 0xF3, 0xB7, 0xAE, 0xEB, 0x44, 0x94, 0x3C, 0x6F, 0x0E, 0xBB,
	//     0x50, 0xF9, 0x26, 0x3F, 0x0B, 0x8E, 0x55, 0x01, 0x11, 0x52, 0x30, 0x1D,
	//     0xE4, 0x7D, 0xB5, 0x3B, 0x9F, 0x80, 0x69, 0x04, 0xEA, 0xFD, 0x36, 0xE7,
	//     0x56, 0xC3, 0x54, 0x9C, 0x3C, 0x5D, 0xF1, 0x19, 0xC8, 0x87, 0x36, 0xF9,
	//     0x1F, 0xA5, 0xA7, 0x6A, 0xE0, 0x1D, 0xCD, 0x4D, 0x8B, 0x11, 0xC3, 0xF5,
	//     0x05, 0xA7, 0xBA, 0x21, 0xE5, 0x3E, 0x17, 0xD8, 0x80, 0xD6, 0x50, 0x83,
	//     0x5A, 0xBF, 0x3D, 0xD7, 0xCE, 0x91, 0x14, 0xD0, 0xE6, 0x5C, 0xBE, 0xC2,
	//     0xD8, 0x70, 0x73, 0x82, 0xB0, 0x54, 0xF7, 0x01, 0xA3, 0x7A, 0xFE, 0x17,
	//     0x02, 0xEA, 0xD8, 0x3E, 0x05, 0xD4, 0x61, 0x59, 0x07, 0xA8, 0x12, 0xA6,
	//     0x25, 0x98, 0x94, 0x8F, 0x40, 0xF9, 0x8E, 0xA3, 0x28, 0x5D, 0xA3, 0x38,
	//     0x51, 0xBD, 0x7F, 0xA9, 0xA7, 0x8C, 0x62, 0x85, 0xB9, 0x17, 0x00, 0xCE,
	//     0x5F, 0x6F, 0x0D, 0xD7, 0xB5, 0x1C, 0x01, 0x52, 0xC3, 0x69, 0x45, 0xCB,
	//     0xFA, 0x63, 0x5C, 0x66, 0xB9, 0x60, 0x92, 0x15, 0x30, 0x1F, 0x4A, 0x71,
	//     0x89, 0x36, 0x51, 0x11, 0x8F, 0x3A, 0x15, 0x96, 0x70, 0xB3, 0xCD, 0x7F,
	//     0x45, 0x60, 0x16, 0x9A, 0x58, 0x62, 0xF4, 0x50, 0x64, 0x24, 0x8C, 0x84,
	//     0x86, 0x29, 0x52, 0x44, 0x19, 0xB2, 0xBE, 0x18, 0x39, 0x6F, 0x09, 0xB6,
	//     0x96, 0x21, 0x91, 0x09, 0x23, 0x11, 0xC5, 0x27, 0xB3, 0x68, 0xD9, 0x4A,
	//     0x80, 0xCE, 0x40, 0x02, 0x1B, 0x4C, 0x69, 0x46, 0x7B, 0xD6, 0x41, 0xE7,
	//     0x81, 0x6C, 0x48, 0xFD, 0x4A, 0xD1, 0x3D, 0x4B, 0x77, 0x06, 0x5B, 0x75,
	//     0x80, 0xC4, 0x87, 0x3A, 0x28, 0x45, 0x82, 0xCE, 0x48, 0x1C, 0xC9, 0x5C,
	//     0xA8, 0x0D, 0xC3, 0x39, 0xB6, 0x74, 0x43, 0x1D, 0x65, 0x6E, 0xC7, 0x19,
	//     0x8E, 0xC4, 0xDD, 0xE0, 0x19, 0x37, 0xBF, 0x37, 0x9D, 0xB3, 0x5C, 0x4A,
	//     0xE8, 0x12, 0x70, 0x09, 0x38, 0x81, 0x4F, 0xBD, 0xC1, 0xAA, 0x14, 0xAB,
	//     0x73, 0xA0, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
	//     0x42, 0x60, 0x82,
	// }
}
